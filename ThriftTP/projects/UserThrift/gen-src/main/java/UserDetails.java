/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-08")
public class UserDetails implements org.apache.thrift.TBase<UserDetails, UserDetails._Fields>, java.io.Serializable, Cloneable, Comparable<UserDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UserDetails");

  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("first_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("last_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EMAIL_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("email_address", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UserDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UserDetailsTupleSchemeFactory();

  public java.lang.String first_name; // required
  public java.lang.String last_name; // required
  public java.lang.String email_address; // required
  public java.lang.String city; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIRST_NAME((short)1, "first_name"),
    LAST_NAME((short)2, "last_name"),
    EMAIL_ADDRESS((short)3, "email_address"),
    CITY((short)4, "city");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIRST_NAME
          return FIRST_NAME;
        case 2: // LAST_NAME
          return LAST_NAME;
        case 3: // EMAIL_ADDRESS
          return EMAIL_ADDRESS;
        case 4: // CITY
          return CITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("first_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("last_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EMAIL_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("email_address", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UserDetails.class, metaDataMap);
  }

  public UserDetails() {
  }

  public UserDetails(
    java.lang.String first_name,
    java.lang.String last_name,
    java.lang.String email_address,
    java.lang.String city)
  {
    this();
    this.first_name = first_name;
    this.last_name = last_name;
    this.email_address = email_address;
    this.city = city;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UserDetails(UserDetails other) {
    if (other.isSetFirst_name()) {
      this.first_name = other.first_name;
    }
    if (other.isSetLast_name()) {
      this.last_name = other.last_name;
    }
    if (other.isSetEmail_address()) {
      this.email_address = other.email_address;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
  }

  public UserDetails deepCopy() {
    return new UserDetails(this);
  }

  @Override
  public void clear() {
    this.first_name = null;
    this.last_name = null;
    this.email_address = null;
    this.city = null;
  }

  public java.lang.String getFirst_name() {
    return this.first_name;
  }

  public UserDetails setFirst_name(java.lang.String first_name) {
    this.first_name = first_name;
    return this;
  }

  public void unsetFirst_name() {
    this.first_name = null;
  }

  /** Returns true if field first_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFirst_name() {
    return this.first_name != null;
  }

  public void setFirst_nameIsSet(boolean value) {
    if (!value) {
      this.first_name = null;
    }
  }

  public java.lang.String getLast_name() {
    return this.last_name;
  }

  public UserDetails setLast_name(java.lang.String last_name) {
    this.last_name = last_name;
    return this;
  }

  public void unsetLast_name() {
    this.last_name = null;
  }

  /** Returns true if field last_name is set (has been assigned a value) and false otherwise */
  public boolean isSetLast_name() {
    return this.last_name != null;
  }

  public void setLast_nameIsSet(boolean value) {
    if (!value) {
      this.last_name = null;
    }
  }

  public java.lang.String getEmail_address() {
    return this.email_address;
  }

  public UserDetails setEmail_address(java.lang.String email_address) {
    this.email_address = email_address;
    return this;
  }

  public void unsetEmail_address() {
    this.email_address = null;
  }

  /** Returns true if field email_address is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail_address() {
    return this.email_address != null;
  }

  public void setEmail_addressIsSet(boolean value) {
    if (!value) {
      this.email_address = null;
    }
  }

  public java.lang.String getCity() {
    return this.city;
  }

  public UserDetails setCity(java.lang.String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIRST_NAME:
      if (value == null) {
        unsetFirst_name();
      } else {
        setFirst_name((java.lang.String)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLast_name();
      } else {
        setLast_name((java.lang.String)value);
      }
      break;

    case EMAIL_ADDRESS:
      if (value == null) {
        unsetEmail_address();
      } else {
        setEmail_address((java.lang.String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIRST_NAME:
      return getFirst_name();

    case LAST_NAME:
      return getLast_name();

    case EMAIL_ADDRESS:
      return getEmail_address();

    case CITY:
      return getCity();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIRST_NAME:
      return isSetFirst_name();
    case LAST_NAME:
      return isSetLast_name();
    case EMAIL_ADDRESS:
      return isSetEmail_address();
    case CITY:
      return isSetCity();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UserDetails)
      return this.equals((UserDetails)that);
    return false;
  }

  public boolean equals(UserDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first_name = true && this.isSetFirst_name();
    boolean that_present_first_name = true && that.isSetFirst_name();
    if (this_present_first_name || that_present_first_name) {
      if (!(this_present_first_name && that_present_first_name))
        return false;
      if (!this.first_name.equals(that.first_name))
        return false;
    }

    boolean this_present_last_name = true && this.isSetLast_name();
    boolean that_present_last_name = true && that.isSetLast_name();
    if (this_present_last_name || that_present_last_name) {
      if (!(this_present_last_name && that_present_last_name))
        return false;
      if (!this.last_name.equals(that.last_name))
        return false;
    }

    boolean this_present_email_address = true && this.isSetEmail_address();
    boolean that_present_email_address = true && that.isSetEmail_address();
    if (this_present_email_address || that_present_email_address) {
      if (!(this_present_email_address && that_present_email_address))
        return false;
      if (!this.email_address.equals(that.email_address))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFirst_name()) ? 131071 : 524287);
    if (isSetFirst_name())
      hashCode = hashCode * 8191 + first_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetLast_name()) ? 131071 : 524287);
    if (isSetLast_name())
      hashCode = hashCode * 8191 + last_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetEmail_address()) ? 131071 : 524287);
    if (isSetEmail_address())
      hashCode = hashCode * 8191 + email_address.hashCode();

    hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
    if (isSetCity())
      hashCode = hashCode * 8191 + city.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UserDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFirst_name()).compareTo(other.isSetFirst_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirst_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.first_name, other.first_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLast_name()).compareTo(other.isSetLast_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLast_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.last_name, other.last_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmail_address()).compareTo(other.isSetEmail_address());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail_address()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email_address, other.email_address);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UserDetails(");
    boolean first = true;

    sb.append("first_name:");
    if (this.first_name == null) {
      sb.append("null");
    } else {
      sb.append(this.first_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("last_name:");
    if (this.last_name == null) {
      sb.append("null");
    } else {
      sb.append(this.last_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("email_address:");
    if (this.email_address == null) {
      sb.append("null");
    } else {
      sb.append(this.email_address);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserDetailsStandardScheme getScheme() {
      return new UserDetailsStandardScheme();
    }
  }

  private static class UserDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<UserDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UserDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.first_name = iprot.readString();
              struct.setFirst_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.last_name = iprot.readString();
              struct.setLast_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EMAIL_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email_address = iprot.readString();
              struct.setEmail_addressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UserDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.first_name != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.first_name);
        oprot.writeFieldEnd();
      }
      if (struct.last_name != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.last_name);
        oprot.writeFieldEnd();
      }
      if (struct.email_address != null) {
        oprot.writeFieldBegin(EMAIL_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.email_address);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UserDetailsTupleScheme getScheme() {
      return new UserDetailsTupleScheme();
    }
  }

  private static class UserDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<UserDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UserDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFirst_name()) {
        optionals.set(0);
      }
      if (struct.isSetLast_name()) {
        optionals.set(1);
      }
      if (struct.isSetEmail_address()) {
        optionals.set(2);
      }
      if (struct.isSetCity()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFirst_name()) {
        oprot.writeString(struct.first_name);
      }
      if (struct.isSetLast_name()) {
        oprot.writeString(struct.last_name);
      }
      if (struct.isSetEmail_address()) {
        oprot.writeString(struct.email_address);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UserDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.first_name = iprot.readString();
        struct.setFirst_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.last_name = iprot.readString();
        struct.setLast_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.email_address = iprot.readString();
        struct.setEmail_addressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

